const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["../chunks/DLtOztZh.js","../chunks/BWWySPzG.js","../assets/PhylogeneticTreeViewer.CmMO-WSj.css","../chunks/v5XMuwi6.js"])))=>i.map(i=>d[i]);
import"../chunks/CWj6FrbW.js";import"../chunks/D_-aaKZl.js";import{o as G,a as ne}from"../chunks/o3K4TFwT.js";import{p as Q,aC as oe,i as n,q as A,j as ie,aD as ce,f as L,c as p,r as f,a as g,m as W,aE as K,w as X,x as V,o as y,s as _,t as he,v as de,n as Y}from"../chunks/DFDNEQV0.js";import{i as B,b as ve}from"../chunks/DwfxME3I.js";import{i as Z}from"../chunks/DPzC27DL.js";import{J as M,K as ue,L as pe,N as fe}from"../chunks/BWWySPzG.js";import{_ as ge}from"../chunks/C1FmrZbK.js";import{r as U,a as ye,b as be,c as me}from"../chunks/m5uLgNLF.js";import{p as m}from"../chunks/rOhOFPaZ.js";var _e=L('<div class="loading svelte-12jj8io">No tree data provided</div>'),we=L('<div class="loading svelte-12jj8io">Loading phylogenetic tree library...</div>'),je=L('<div class="controls svelte-12jj8io"><div class="control-group svelte-12jj8io"><label for="tree-index" class="svelte-12jj8io">Tree:</label> <input id="tree-index" type="number" min="0" max="10" class="svelte-12jj8io"/></div> <div class="control-group svelte-12jj8io"><label for="color-branches" class="svelte-12jj8io">Color branches:</label> <select id="color-branches" class="svelte-12jj8io"><option>None</option><option>Branch length</option></select></div> <div class="control-group svelte-12jj8io"><label class="svelte-12jj8io"><input type="checkbox" class="svelte-12jj8io"/> Show labels</label></div></div> <div class="tree-container svelte-12jj8io"></div>',1),Le=L('<div class="phylogenetic-tree-viewer svelte-12jj8io"><!></div>');function Te(C,d){Q(d,!1);let o=m(d,"data",8,null),T=m(d,"width",8,800),w=m(d,"height",8,600),u=m(d,"branchLengthProperty",8,"branch length"),j=m(d,"colorBranches",12,"none"),k=m(d,"showLabels",12,!0),x=m(d,"treeIndex",12,0),r=A(),s=null,h=A(!0);async function S(){try{const e=document.createElement("link");e.rel="stylesheet",e.href="https://cdn.jsdelivr.net/npm/phylotree@0.1/phylotree.css",document.head.appendChild(e);const a=await ge(()=>import("../chunks/DLtOztZh.js"),__vite__mapDeps([0,1,2,3]),import.meta.url);return y(h,!1),a}catch(e){return console.error("Failed to load phylotree library:",e),y(h,!1),null}}function N(e,a=0){var i;if(!((i=e==null?void 0:e.input)!=null&&i.trees))return null;const t=e.input.trees;if(Array.isArray(t))return t[a]||t[0]||null;if(typeof t=="object"){const l=Object.keys(t),c=l[a]||l[0];return t[c]||null}else if(typeof t=="string")return t;return null}function $(e,a=0){if(!(e!=null&&e["branch attributes"]))return{};const t=e["branch attributes"];if(Array.isArray(t))return t[a]||t[0]||{};if(typeof t=="object"){const i=Object.keys(t),l=i[a]||i[0];return t[l]||{}}return t||{}}function ee(e,a,t){if(!e||j()==="none")return;const i=$(a,t);if(j()==="branch length"&&u()){const l=[];if(e.get_nodes().forEach(c=>{const v=i[c.data.name];v&&v[u()]!==void 0&&l.push(v[u()])}),l.length>0){const c=ue(pe).domain(fe(l));e.style_edges((v,P)=>{const b=i[P.target.data.name],D=b==null?void 0:b[u()];D!==void 0&&M(v).style("stroke",c(D))})}}}async function q(){if(!n(r)||!o()||n(h))return;const e=await S();if(!e)return;const a=N(o(),x());if(!a){K(r,n(r).innerHTML="<p>No tree data found</p>");return}K(r,n(r).innerHTML="");try{const t=M(n(r)).append("svg").attr("width",T()).attr("height",w());s=e.phylotree(a),s.size([w()-40,T()-40]).separation((i,l)=>1),k()&&s.node_circle_size(0),s(t.append("g").attr("transform","translate(20,20)")),ee(s,o(),x()),k()&&s.style_nodes((i,l)=>{l.data.name&&!l.children&&M(i.parentNode).append("text").attr("dx",5).attr("dy","0.35em").style("font-size","12px").text(l.data.name)}),s.layout()}catch(t){console.error("Error rendering tree:",t),K(r,n(r).innerHTML='<p class="error">Error rendering phylogenetic tree</p>')}}G(()=>{o()&&q()}),ne(()=>{s&&(s=null)}),oe(()=>(ie(o()),n(r),n(h)),()=>{o()&&n(r)&&!n(h)&&q()}),ce(),Z();var E=Le(),te=p(E);{var re=e=>{var a=_e();g(e,a)},se=e=>{var a=X(),t=V(a);{var i=c=>{var v=we();g(c,v)},l=c=>{var v=je(),P=V(v),b=p(P),D=_(p(b),2);U(D),f(b);var H=_(b,2),z=_(p(H),2);he(()=>{j(),de(()=>{})});var I=p(z);I.value=I.__value="none";var F=_(I);F.value=F.__value="branch length",f(z),f(H);var O=_(H,2),R=p(O),J=p(R);U(J),Y(),f(R),f(O),f(P);var ae=_(P,2);ve(ae,le=>y(r,le),()=>n(r)),ye(D,x),be(z,j),me(J,k),g(c,v)};B(t,c=>{n(h)?c(i):c(l,!1)},!0)}g(e,a)};B(te,e=>{o()?e(se,!1):e(re)})}f(E),g(C,E),W()}var ke=L('<div class="loading svelte-1hrhwcl">Loading tree data...</div>'),xe=L(`<div class="page-container svelte-1hrhwcl"><h1 class="svelte-1hrhwcl">Phylogenetic Tree Viewer Demo</h1> <p class="description svelte-1hrhwcl">This is a simple phylogenetic tree viewer component for visualizing trees from HyPhy analysis results.
    It supports basic tree rendering with branch coloring and node labels.</p> <!> <div class="info-section svelte-1hrhwcl"><h2 class="svelte-1hrhwcl">Features</h2> <ul class="svelte-1hrhwcl"><li class="svelte-1hrhwcl"><strong>Tree Rendering</strong>: Uses the phylotree.js library for robust tree visualization</li> <li class="svelte-1hrhwcl"><strong>Branch Coloring</strong>: Color branches by branch length or other attributes</li> <li class="svelte-1hrhwcl"><strong>Node Labels</strong>: Display sequence names and other node information</li> <li class="svelte-1hrhwcl"><strong>Interactive Controls</strong>: Toggle labels and coloring options</li> <li class="svelte-1hrhwcl"><strong>Multiple Trees</strong>: Support for datasets with multiple trees</li> <li class="svelte-1hrhwcl"><strong>HyPhy Integration</strong>: Designed to work with HyPhy analysis results</li></ul> <h2 class="svelte-1hrhwcl">Supported Data Format</h2> <p>The component expects HyPhy analysis results with:</p> <ul class="svelte-1hrhwcl"><li class="svelte-1hrhwcl"><code class="svelte-1hrhwcl">input.trees</code>: Newick format tree string(s)</li> <li class="svelte-1hrhwcl"><code class="svelte-1hrhwcl">branch attributes</code>: Branch-specific data for coloring and tooltips</li></ul></div></div>`);function Ie(C,d){Q(d,!1);let o=A(null),T=A(!0);const w={input:{trees:["((A:0.1,B:0.2):0.05,(C:0.15,D:0.1):0.05);"]},"branch attributes":[{A:{"branch length":.1,"dN/dS":.5},B:{"branch length":.2,"dN/dS":1.5},C:{"branch length":.15,"dN/dS":.8},D:{"branch length":.1,"dN/dS":1.2}}]};G(async()=>{var r;try{const s=await fetch("/src/data/fel_test_data.json");if(s.ok){const h=await s.json();(r=h.input)!=null&&r.trees?y(o,h):y(o,w)}else y(o,w)}catch(s){console.warn("Could not load tree data, using sample:",s),y(o,w)}finally{y(T,!1)}}),Z();var u=xe(),j=_(p(u),4);{var k=r=>{var s=ke();g(r,s)},x=r=>{var s=X(),h=V(s);{var S=N=>{Te(N,{get data(){return n(o)},width:800,height:500,showLabels:!0,colorBranches:"branch length"})};B(h,N=>{N(S,!1)},!0)}g(r,s)};B(j,r=>{n(T)?r(k):r(x,!1)})}Y(2),f(u),g(C,u),W()}export{Ie as component};
