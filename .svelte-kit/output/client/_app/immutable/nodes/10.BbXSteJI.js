import"../chunks/CWj6FrbW.js";import"../chunks/DwqWfmFf.js";import{o as ut}from"../chunks/Cwh0FcVT.js";import{p as ft,f,t as B,c as o,s,i as l,a as m,m as bt,$ as _t,q as u,o as a,n as w,r,v as wt,w as gt,x as Mt}from"../chunks/BAjxKRmT.js";import{h as Et,e as g,s as yt}from"../chunks/BzaWH1un.js";import{b as Lt,i as M}from"../chunks/CNWIBFBx.js";import{h as Dt}from"../chunks/mVHckqdF.js";import{a as St,b as Ft,l as Z,c as xt,g as N,r as Ut}from"../chunks/DJlT08gO.js";import{i as Rt}from"../chunks/HQjPdDHY.js";import"../chunks/DMkSVGaj.js";import{M as zt}from"../chunks/BflcaXvB.js";var Tt=f('<meta name="description" content="Interactive MEME (Mixed Effects Model of Evolution) analysis visualization"/>'),At=f('<div class="status loading svelte-tshmbw"><p>Loading data...</p></div>'),It=f('<div class="status error svelte-tshmbw"><p> </p> <button class="svelte-tshmbw">Dismiss</button></div>'),Pt=f('<div class="visualization-section svelte-tshmbw"><h2>Analysis Results</h2> <!></div>'),jt=f('<div class="no-data svelte-tshmbw"><p>Please load MEME analysis data to begin visualization.</p></div>'),kt=f(`<div class="meme-demo svelte-tshmbw"><div class="header svelte-tshmbw"><h1 class="svelte-tshmbw">MEME Analysis Visualization</h1> <p class="svelte-tshmbw">Interactive visualization for Mixed Effects Model of Evolution (MEME) analysis results from HyPhy.</p></div> <div class="data-loading svelte-tshmbw"><h2>Load Data</h2> <div class="loading-options svelte-tshmbw"><div class="option svelte-tshmbw"><h3 class="svelte-tshmbw">Upload File</h3> <input type="file" accept=".json" class="svelte-tshmbw"/> <p class="help svelte-tshmbw">Select a HyPhy MEME results JSON file</p></div> <div class="option svelte-tshmbw"><h3 class="svelte-tshmbw">Load from URL</h3> <div class="url-input svelte-tshmbw"><input type="url" placeholder="https://example.com/results.json" class="svelte-tshmbw"/> <button class="svelte-tshmbw">Load</button></div> <p class="help svelte-tshmbw">Enter a URL to a publicly accessible JSON file</p></div> <div class="option svelte-tshmbw"><h3 class="svelte-tshmbw">Test Data</h3> <div class="test-data-controls svelte-tshmbw"><select class="svelte-tshmbw"><option>MEME</option><option>FEL</option><option>SLAC</option><option>BUSTED</option><option>aBSREL</option><option>RELAX</option><option>BGM</option><option>FADE</option><option>GARD</option></select> <button class="svelte-tshmbw">Load Test Data</button></div> <p class="help svelte-tshmbw">Select from available test datasets</p></div></div> <!> <!></div> <!> <div class="usage-info svelte-tshmbw"><h2 class="svelte-tshmbw">Usage</h2> <h3 class="svelte-tshmbw">As a Component</h3> <pre class="svelte-tshmbw"><code class="svelte-tshmbw"><!></code></pre> <h3 class="svelte-tshmbw">Features</h3> <ul class="svelte-tshmbw"><li class="svelte-tshmbw">Multiple plot types: p-values, site rates, density plots, Bayes factors</li> <li class="svelte-tshmbw">Interactive controls for p-value thresholds</li> <li class="svelte-tshmbw">Site classification filtering</li> <li class="svelte-tshmbw">Detailed results table with episodic selection analysis</li> <li class="svelte-tshmbw">Summary statistics and tile visualization</li> <li class="svelte-tshmbw">Support for parametric bootstrap and asymptotic tests</li></ul> <h3 class="svelte-tshmbw">MEME Method</h3> <p>MEME (Mixed Effects Model of Evolution) identifies sites that have experienced <strong>episodic diversifying selection</strong>. Unlike methods that assume selection 
      affects all branches uniformly, MEME allows for different selective pressures on 
      different branches at the same site.</p> <h3 class="svelte-tshmbw">Key Features</h3> <ul class="svelte-tshmbw"><li class="svelte-tshmbw"><strong>Episodic Selection:</strong> Detects selection that affects only some lineages</li> <li class="svelte-tshmbw"><strong>Two Rate Classes:</strong> β- (constrained) and β+ (unconstrained) rates</li> <li class="svelte-tshmbw"><strong>Branch-Site Model:</strong> Different branches can have different selection pressures</li> <li class="svelte-tshmbw"><strong>Statistical Testing:</strong> LRT with parametric bootstrap or asymptotic approximation</li></ul></div></div>`);function $t(tt,at){ft(at,!1);let v=u(null),p=u(!1),i=u(null),V=u(),b=u("meme"),E,c=u(""),y="";ut(()=>(E=new URLSearchParams(window.location.search),a(c,E.get("json")||""),y=E.get("id")||"",st(),window.addEventListener("message",J,!1),()=>{window.removeEventListener("message",J,!1)}));async function st(){a(p,!0),a(i,null);try{l(c)?(a(v,await Z(l(c))),l(v)||a(i,"Failed to load data from URL")):y?(a(v,xt(y)),l(v)||a(i,"No data found in storage for the provided ID")):a(v,await et())}catch(t){a(i,t instanceof Error?t.message:"Failed to load data")}finally{a(p,!1)}}async function et(){return await N(l(b))||await N("meme")}async function lt(){try{const t=await N(l(b));t?(a(v,t),a(i,null)):a(i,"Selected test data not found")}catch{a(i,"Failed to load test data")}}function J(t){var e,n;t.data&&typeof t.data=="object"&&((e=t.data.data)!=null&&e.MLE?a(v,t.data.data):t.data.type==="data-response"&&((n=t.data.data)!=null&&n.MLE)&&a(v,t.data.data))}async function it(t){var n;const e=(n=t.target.files)==null?void 0:n[0];if(e){a(p,!0),a(i,null);try{const h=await e.text(),d=JSON.parse(h);d!=null&&d.MLE?a(v,d):a(i,"Invalid MEME results file. Must contain MLE data.")}catch{a(i,"Failed to parse JSON file")}finally{a(p,!1)}}}function ot(){l(c).trim()&&Z(l(c).trim()).then(t=>{t?(a(v,t),a(i,null)):a(i,"Failed to load data from URL")})}Rt();var L=kt();Et(t=>{var e=Tt();_t.title="MEME Visualization - HyPhy Scope",m(t,e)});var D=s(o(L),2),S=s(o(D),2),F=o(S),O=s(o(F),2);Lt(O,t=>a(V,t),()=>l(V)),w(2),r(F);var x=s(F,2),C=s(o(x),2),U=o(C);Ut(U);var H=s(U,2);r(C),w(2),r(x);var G=s(x,2),q=s(o(G),2),_=o(q);B(()=>{l(b),wt(()=>{})});var R=o(_);R.value=R.__value="meme";var z=s(R);z.value=z.__value="fel";var T=s(z);T.value=T.__value="slac";var A=s(T);A.value=A.__value="busted";var I=s(A);I.value=I.__value="absrel";var P=s(I);P.value=P.__value="relax";var j=s(P);j.value=j.__value="bgm";var k=s(j);k.value=k.__value="fade";var K=s(k);K.value=K.__value="gard",r(_);var rt=s(_,2);r(q),w(2),r(G),r(S);var X=s(S,2);{var nt=t=>{var e=At();m(t,e)};M(X,t=>{l(p)&&t(nt)})}var vt=s(X,2);{var dt=t=>{var e=It(),n=o(e),h=o(n);r(n);var d=s(n,2);r(e),B(()=>yt(h,`Error: ${l(i)??""}`)),g("click",d,()=>a(i,null)),m(t,e)};M(vt,t=>{l(i)&&t(dt)})}r(D);var $=s(D,2);{var ct=t=>{var e=Pt(),n=s(o(e),2);zt(n,{get data(){return l(v)}}),r(e),m(t,e)},mt=t=>{var e=gt(),n=Mt(e);{var h=d=>{var ht=jt();m(d,ht)};M(n,d=>{!l(p)&&!l(i)&&d(h)},!0)}m(t,e)};M($,t=>{l(v)?t(ct):t(mt,!1)})}var Q=s($,2),W=s(o(Q),4),Y=o(W),pt=o(Y);Dt(pt,()=>`&lt;script&gt;
  import { MemeVisualization } from 'hyphy-scope';
  
  let data = null;
  
  // Load your data
  onMount(async () => {
    data = await loadDataFromUrl(params.json) ||
           loadDataFromStorage(params.id) ||
           defaultData;
  });
&lt;/script&gt;

&lt;MemeVisualization {data} /&gt;`),r(Y),r(W),w(12),r(Q),r(L),B(t=>H.disabled=t,[()=>!l(c).trim()]),g("change",O,it),St(U,()=>l(c),t=>a(c,t)),g("click",H,ot),Ft(_,()=>l(b),t=>a(b,t)),g("click",rt,lt),m(tt,L),bt()}export{$t as component};
