import"../chunks/CWj6FrbW.js";import"../chunks/Dh1LkfYh.js";import{o as ee}from"../chunks/BVXFiTq-.js";import{p as te,i as e,q as D,A as le,y as Y,o as s,j as Z,z as ne,f as b,c as o,r as a,a as u,m as ie,s as c,x as se,n as _,t as I,e as q,$ as re,v as ce,w as ve}from"../chunks/CGZSrXyu.js";import{s as G,h as de,e as N}from"../chunks/BzHdtkot.js";import{i as w,b as me}from"../chunks/JwmFF-xm.js";import{e as fe,b as pe,a as ue,g as ge,i as be,r as he,l as xe,c as _e}from"../chunks/BM8ST8i7.js";import{i as ae}from"../chunks/ui6rPYHM.js";import{z as ye,A as ke}from"../chunks/CKo-VmNz.js";import{s as De}from"../chunks/BR0iTFIE.js";import{p as Ae}from"../chunks/BWiVFVQA.js";import{d as Re}from"../chunks/CH6E2OhH.js";var Ge=b('<div class="loading svelte-1pfa5eb">Loading GARD data...</div>'),Se=b('<div class="summary-tiles svelte-1pfa5eb"><div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Sequences</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Sites</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb" style="color: #e3243b"> </div> <div class="tile-description svelte-1pfa5eb">Breakpoints</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Recombination</div></div></div>'),Le=b('<div class="analysis-info svelte-1pfa5eb"><h2 class="svelte-1pfa5eb">GARD Analysis Results</h2> <p><strong>Genetic Algorithm for Recombination Detection</strong> identifies recombination breakpoints in alignments.</p></div> <!> <div class="plot-section svelte-1pfa5eb"><h3 class="svelte-1pfa5eb">Breakpoint Locations</h3> <div class="plot-container svelte-1pfa5eb"></div></div> <div class="citation svelte-1pfa5eb"><h3 class="svelte-1pfa5eb">Citation</h3> <code class="svelte-1pfa5eb">Kosakovsky Pond SL, Posada D, Gravenor MB, Woelk CH, Frost SDW. GARD: a genetic algorithm for recombination detection. Bioinformatics. 2006;22(24):3096-8.</code></div>',1),we=b('<div class="gard-visualization svelte-1pfa5eb"><!></div>');function ze(J,E){te(E,!1);const l=D(),r=D();let v=Ae(E,"data",8),f=D();function A(i){var p,g,h;const d=i.breakpoints||[];return{sequences:((p=i.input)==null?void 0:p.sequences)||0,sites:((g=i.input)==null?void 0:g.sites)||0,breakpoints:d.length,recombinants:((h=i.recombinants)==null?void 0:h.length)||0,pValue:i["p-value"]||1,hasRecombination:(i["p-value"]||1)<=.05}}function W(i){return(i.breakpoints||[]).map((p,g)=>({id:g+1,position:p.position||0,support:p.support||0,confidence:p.confidence||0}))}function T(i){return i.length?ye({title:"Recombination Breakpoints",width:800,height:300,x:{label:"Sequence Position",grid:!0},y:{label:"Support",grid:!0},marks:[Re(i,{x:"position",y:"support",r:6,fill:"#e3243b",title:d=>`Breakpoint ${d.id}
Position: ${d.position}
Support: ${d.support.toFixed(3)}
Confidence: ${d.confidence.toFixed(3)}`}),ke(i,{x:"position",stroke:"#e3243b",strokeDasharray:"2,2",strokeOpacity:.5})]}):null}ee(()=>{e(r).length>0&&$()});function $(){if(e(f)){const i=T(e(r));i&&(le(f,e(f).innerHTML=""),e(f).appendChild(i))}}Y(()=>Z(v()),()=>{s(l,v()?A(v()):null)}),Y(()=>Z(v()),()=>{s(r,v()?W(v()):[])}),Y(()=>e(r),()=>{e(r).length>0&&$()}),ne(),ae();var z=we(),j=o(z);{var B=i=>{var d=Ge();u(i,d)},F=i=>{var d=Le(),p=c(se(d),2);{var g=x=>{var S=Se(),y=o(S),P=o(y),H=o(P,!0);a(P),_(2),a(y);var L=c(y,2),U=o(L),X=o(U,!0);a(U),_(2),a(L);var C=c(L,2),O=o(C),Q=o(O,!0);a(O),_(2),a(C);var V=c(C,2),M=o(V),t=o(M,!0);a(M),_(2),a(V),a(S),I(()=>{G(H,(e(l),q(()=>e(l).sequences))),G(X,(e(l),q(()=>e(l).sites))),G(Q,(e(l),q(()=>e(l).breakpoints))),De(M,`color: ${e(l),q(()=>e(l).hasRecombination?"#e3243b":"#666")??""}`),G(t,(e(l),q(()=>e(l).hasRecombination?"YES":"NO")))}),u(x,S)};w(p,x=>{e(l)&&x(g)})}var h=c(p,2),K=c(o(h),2);me(K,x=>s(f,x),()=>e(f)),a(h),_(2),u(i,d)};w(j,i=>{v()?i(F,!1):i(B)})}a(z),u(J,z),ie()}var Be=b('<meta name="description" content="Interactive visualization of GARD (Genetic Algorithm for Recombination Detection) analysis results"/>'),Fe=b("<option> </option>"),Pe=b('<div class="status loading svelte-xmeofi"><p>Loading data...</p></div>'),Ue=b('<div class="status error svelte-xmeofi"><p> </p> <button class="svelte-xmeofi">Dismiss</button></div>'),Ce=b('<div class="visualization-section svelte-xmeofi"><!></div>'),Me=b('<div class="no-data svelte-xmeofi"><h3>No Data Loaded</h3> <p>Please load GARD analysis data using one of the options above to see the visualization.</p></div>'),qe=b(`<div class="gard-demo svelte-xmeofi"><div class="header svelte-xmeofi"><h1 class="svelte-xmeofi">GARD Analysis</h1> <p class="svelte-xmeofi">Interactive visualization of Genetic Algorithm for Recombination Detection analysis.
      GARD identifies recombination breakpoints in sequence alignments.</p></div> <div class="data-loading svelte-xmeofi"><h2>Load Data</h2> <div class="loading-options svelte-xmeofi"><div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Test Data</h3> <div class="test-data-controls svelte-xmeofi"><select class="svelte-xmeofi"></select> <button class="svelte-xmeofi"> </button></div> <p class="help svelte-xmeofi">Load example data to explore the visualization features.</p></div> <div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Load from URL</h3> <div class="url-input svelte-xmeofi"><input type="url" placeholder="Enter JSON file URL..." class="svelte-xmeofi"/> <button class="svelte-xmeofi">Load</button></div> <p class="help svelte-xmeofi">Load GARD results from a remote JSON file.</p></div> <div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Upload File</h3> <input type="file" accept=".json,.gz" class="svelte-xmeofi"/> <p class="help svelte-xmeofi">Upload a local GARD JSON file from your computer.</p></div></div> <!> <!></div> <!> <div class="usage-info svelte-xmeofi"><h2 class="svelte-xmeofi">About GARD</h2> <h3 class="svelte-xmeofi">What is GARD?</h3> <p><strong>GARD (Genetic Algorithm for Recombination Detection)</strong> is a method for 
      detecting recombination breakpoints in nucleotide sequence alignments. It uses genetic 
      algorithms to search for the optimal placement of breakpoints that best explain 
      phylogenetic incongruence in the data.</p> <h3 class="svelte-xmeofi">Key Features</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Genetic algorithm:</strong> Uses GA optimization for breakpoint detection</li> <li class="svelte-xmeofi"><strong>Model selection:</strong> Compares models with and without recombination</li> <li class="svelte-xmeofi"><strong>Breakpoint mapping:</strong> Identifies precise locations of recombination events</li> <li class="svelte-xmeofi"><strong>Statistical testing:</strong> Provides significance tests for recombination</li> <li class="svelte-xmeofi"><strong>Multiple breakpoints:</strong> Can detect multiple recombination events</li></ul> <h3 class="svelte-xmeofi">Interpretation</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Breakpoint position:</strong> Location where recombination occurred</li> <li class="svelte-xmeofi"><strong>Support values:</strong> Statistical support for each breakpoint</li> <li class="svelte-xmeofi"><strong>Confidence intervals:</strong> Uncertainty in breakpoint positions</li> <li class="svelte-xmeofi"><strong>p-value &lt; 0.05:</strong> Significant evidence for recombination</li> <li class="svelte-xmeofi"><strong>Model improvement:</strong> Better fit with recombination model</li></ul> <h3 class="svelte-xmeofi">Using This Component</h3> <pre class="svelte-xmeofi"><code class="svelte-xmeofi">import &#123; GardVisualization &#125; from 'hyphy-scope';

&lt;GardVisualization data=&#123;gardResults&#125; /&gt;</code></pre> <h3 class="svelte-xmeofi">Data Format</h3> <p>The component expects GARD analysis results in JSON format with the following structure:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><code class="svelte-xmeofi">breakpoints</code> - Array of detected breakpoint locations</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">p-value</code> - Overall significance of recombination detection</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">recombinants</code> - Information about recombinant sequences</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">input</code> - Input parameters (sequences, sites)</li></ul> <h3 class="svelte-xmeofi">Applications</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Viral evolution:</strong> Detect recombination in viral genomes</li> <li class="svelte-xmeofi"><strong>Population genetics:</strong> Identify recombination hotspots</li> <li class="svelte-xmeofi"><strong>Phylogenetic analysis:</strong> Account for recombination in tree construction</li> <li class="svelte-xmeofi"><strong>HIV research:</strong> Study recombination in HIV sequences</li> <li class="svelte-xmeofi"><strong>Bacterial genomics:</strong> Detect horizontal gene transfer events</li></ul> <h3 class="svelte-xmeofi">Method Comparison</h3> <p>GARD differs from other recombination detection methods:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Model-based:</strong> Uses maximum likelihood framework</li> <li class="svelte-xmeofi"><strong>GA optimization:</strong> Efficient search through breakpoint space</li> <li class="svelte-xmeofi"><strong>Multiple breakpoints:</strong> Can handle complex recombination patterns</li> <li class="svelte-xmeofi"><strong>Statistical rigor:</strong> Provides formal hypothesis testing</li> <li class="svelte-xmeofi"><strong>HyPhy integration:</strong> Seamlessly works with other HyPhy analyses</li></ul> <h3 class="svelte-xmeofi">Workflow Integration</h3> <p>GARD is often used as a preliminary step:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Before selection analysis:</strong> Detect recombination first</li> <li class="svelte-xmeofi"><strong>Data partitioning:</strong> Analyze non-recombinant segments separately</li> <li class="svelte-xmeofi"><strong>Model selection:</strong> Choose appropriate evolutionary models</li> <li class="svelte-xmeofi"><strong>Quality control:</strong> Identify problematic sequences or regions</li></ul></div></div>`);function Xe(J,E){te(E,!1);let l=D(null),r=D(!1),v=D(""),f=D(""),A=D("gard");const W=[{value:"fel",label:"FEL"},{value:"meme",label:"MEME"},{value:"absrel",label:"aBSREL"},{value:"busted",label:"BUSTED"},{value:"relax",label:"RELAX"},{value:"slac",label:"SLAC"},{value:"bgm",label:"BGM"},{value:"fade",label:"FADE"},{value:"gard",label:"GARD"}];ee(async()=>{await T()});async function T(){try{s(r,!0),s(v,""),s(l,await ge(e(A)))}catch(t){s(v,`Failed to load ${e(A).toUpperCase()} test data: ${t.message}`),s(l,null)}finally{s(r,!1)}}async function $(){if(!e(f).trim()){s(v,"Please enter a valid URL");return}try{s(r,!0),s(v,""),s(l,await xe(e(f)))}catch(t){s(v,`Failed to load data from URL: ${t.message}`),s(l,null)}finally{s(r,!1)}}async function z(t){var m;const n=(m=t.target.files)==null?void 0:m[0];if(n)try{s(r,!0),s(v,""),s(l,await _e(n))}catch(R){s(v,`Failed to load file: ${R.message}`),s(l,null)}finally{s(r,!1)}}function j(){s(v,"")}ae();var B=qe();de(t=>{var n=Be();re.title="GARD Analysis - HyPhy Scope",u(t,n)});var F=c(o(B),2),i=c(o(F),2),d=o(i),p=c(o(d),2),g=o(p);I(()=>{e(A),ce(()=>{})}),fe(g,5,()=>W,be,(t,n)=>{var m=Fe(),R=o(m,!0);a(m);var k={};I(()=>{G(R,e(n).label),k!==(k=e(n).value)&&(m.value=(m.__value=e(n).value)??"")}),u(t,m)}),a(g);var h=c(g,2),K=o(h,!0);a(h),a(p),_(2),a(d);var x=c(d,2),S=c(o(x),2),y=o(S);he(y);var P=c(y,2);a(S),_(2),a(x);var H=c(x,2),L=c(o(H),2);_(2),a(H),a(i);var U=c(i,2);{var X=t=>{var n=Pe();u(t,n)};w(U,t=>{e(r)&&t(X)})}var C=c(U,2);{var O=t=>{var n=Ue(),m=o(n),R=o(m,!0);a(m);var k=c(m,2);a(n),I(()=>G(R,e(v))),N("click",k,j),u(t,n)};w(C,t=>{e(v)&&t(O)})}a(F);var Q=c(F,2);{var V=t=>{var n=Ce(),m=o(n);ze(m,{get data(){return e(l)}}),a(n),u(t,n)},M=t=>{var n=ve(),m=se(n);{var R=k=>{var oe=Me();u(k,oe)};w(m,k=>{e(r)||k(R)},!0)}u(t,n)};w(Q,t=>{e(l)?t(V):t(M,!1)})}_(2),a(B),I(t=>{h.disabled=e(r),G(K,e(r)?"Loading...":"Load Test Data"),y.disabled=e(r),P.disabled=t,L.disabled=e(r)},[()=>e(r)||!e(f).trim()]),pe(g,()=>e(A),t=>s(A,t)),N("click",h,T),ue(y,()=>e(f),t=>s(f,t)),N("click",P,$),N("change",L,z),u(J,B),ie()}export{Xe as component};
