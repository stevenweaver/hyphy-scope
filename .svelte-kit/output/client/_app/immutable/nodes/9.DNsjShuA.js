import"../chunks/CWj6FrbW.js";import"../chunks/D_-aaKZl.js";import{o as ee}from"../chunks/o3K4TFwT.js";import{p as te,o as s,q as h,aC as Y,j as Z,i as e,aD as le,f as b,c as o,r as a,a as u,m as ie,aE as ne,s as r,x as se,n as x,t as I,e as E,$ as re,v as ce,w as ve}from"../chunks/DFDNEQV0.js";import{s as G,h as de,e as J}from"../chunks/y1NYNGaY.js";import{i as F,b as me}from"../chunks/DwfxME3I.js";import{e as fe,g as pe,i as ue,l as ge,a as be}from"../chunks/D-5BVINM.js";import{b as he,a as xe,r as _e}from"../chunks/m5uLgNLF.js";import{i as ae}from"../chunks/DPzC27DL.js";import{F as ye,H as De}from"../chunks/BWWySPzG.js";import{s as ke}from"../chunks/D1jAydFb.js";import{p as Ae}from"../chunks/rOhOFPaZ.js";import{d as Re}from"../chunks/Bi4WDgjP.js";var Ge=b('<div class="loading svelte-1pfa5eb">Loading GARD data...</div>'),Se=b('<div class="summary-tiles svelte-1pfa5eb"><div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Sequences</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Sites</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb" style="color: #e3243b"> </div> <div class="tile-description svelte-1pfa5eb">Breakpoints</div></div> <div class="tile svelte-1pfa5eb"><div class="tile-number svelte-1pfa5eb"> </div> <div class="tile-description svelte-1pfa5eb">Recombination</div></div></div>'),Le=b('<div class="analysis-info svelte-1pfa5eb"><h2 class="svelte-1pfa5eb">GARD Analysis Results</h2> <p><strong>Genetic Algorithm for Recombination Detection</strong> identifies recombination breakpoints in alignments.</p></div> <!> <div class="plot-section svelte-1pfa5eb"><h3 class="svelte-1pfa5eb">Breakpoint Locations</h3> <div class="plot-container svelte-1pfa5eb"></div></div> <div class="citation svelte-1pfa5eb"><h3 class="svelte-1pfa5eb">Citation</h3> <code class="svelte-1pfa5eb">Kosakovsky Pond SL, Posada D, Gravenor MB, Woelk CH, Frost SDW. GARD: a genetic algorithm for recombination detection. Bioinformatics. 2006;22(24):3096-8.</code></div>',1),Fe=b('<div class="gard-visualization svelte-1pfa5eb"><!></div>');function we(W,T){te(T,!1);const n=h(),c=h();let v=Ae(T,"data",8),p=h();function k(i){var f,g,A;const m=i.breakpoints||[];return{sequences:((f=i.input)==null?void 0:f.sequences)||0,sites:((g=i.input)==null?void 0:g.sites)||0,breakpoints:m.length,recombinants:((A=i.recombinants)==null?void 0:A.length)||0,pValue:i["p-value"]||1,hasRecombination:(i["p-value"]||1)<=.05}}function j(i){return(i.breakpoints||[]).map((f,g)=>({id:g+1,position:f.position||0,support:f.support||0,confidence:f.confidence||0}))}function $(i){return i.length?ye({title:"Recombination Breakpoints",width:800,height:300,x:{label:"Sequence Position",grid:!0},y:{label:"Support",grid:!0},marks:[Re(i,{x:"position",y:"support",r:6,fill:"#e3243b",title:m=>`Breakpoint ${m.id}
Position: ${m.position}
Support: ${m.support.toFixed(3)}
Confidence: ${m.confidence.toFixed(3)}`}),De(i,{x:"position",stroke:"#e3243b",strokeDasharray:"2,2",strokeOpacity:.5})]}):null}let w=h(!1);ee(()=>{s(w,!0)});function K(){if(e(p)){const i=$(e(c));i&&(ne(p,e(p).innerHTML=""),e(p).appendChild(i))}}Y(()=>Z(v()),()=>{s(n,v()?k(v()):null)}),Y(()=>Z(v()),()=>{s(c,v()?j(v()):[])}),Y(()=>(e(w),e(c)),()=>{e(w)&&e(c).length>0&&K()}),le(),ae();var B=Fe(),C=o(B);{var P=i=>{var m=Ge();u(i,m)},U=i=>{var m=Le(),f=r(se(m),2);{var g=_=>{var y=Se(),S=o(y),M=o(S),H=o(M,!0);a(M),x(2),a(S);var L=r(S,2),O=o(L),X=o(O,!0);a(O),x(2),a(L);var q=r(L,2),V=o(q),Q=o(V,!0);a(V),x(2),a(q);var N=r(q,2),t=o(N),l=o(t,!0);a(t),x(2),a(N),a(y),I(()=>{G(H,(e(n),E(()=>e(n).sequences))),G(X,(e(n),E(()=>e(n).sites))),G(Q,(e(n),E(()=>e(n).breakpoints))),ke(t,`color: ${e(n),E(()=>e(n).hasRecombination?"#e3243b":"#666")??""}`),G(l,(e(n),E(()=>e(n).hasRecombination?"YES":"NO")))}),u(_,y)};F(f,_=>{e(n)&&_(g)})}var A=r(f,2),z=r(o(A),2);me(z,_=>s(p,_),()=>e(p)),a(A),x(2),u(i,m)};F(C,i=>{v()?i(U,!1):i(P)})}a(B),u(W,B),ie()}var Be=b('<meta name="description" content="Interactive visualization of GARD (Genetic Algorithm for Recombination Detection) analysis results"/>'),Ce=b("<option> </option>"),Pe=b('<div class="status loading svelte-xmeofi"><p>Loading data...</p></div>'),Ue=b('<div class="status error svelte-xmeofi"><p> </p> <button class="svelte-xmeofi">Dismiss</button></div>'),ze=b('<div class="visualization-section svelte-xmeofi"><!></div>'),Me=b('<div class="no-data svelte-xmeofi"><h3>No Data Loaded</h3> <p>Please load GARD analysis data using one of the options above to see the visualization.</p></div>'),qe=b(`<div class="gard-demo svelte-xmeofi"><div class="header svelte-xmeofi"><h1 class="svelte-xmeofi">GARD Analysis</h1> <p class="svelte-xmeofi">Interactive visualization of Genetic Algorithm for Recombination Detection analysis.
      GARD identifies recombination breakpoints in sequence alignments.</p></div> <div class="data-loading svelte-xmeofi"><h2>Load Data</h2> <div class="loading-options svelte-xmeofi"><div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Test Data</h3> <div class="test-data-controls svelte-xmeofi"><select class="svelte-xmeofi"></select> <button class="svelte-xmeofi"> </button></div> <p class="help svelte-xmeofi">Load example data to explore the visualization features.</p></div> <div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Load from URL</h3> <div class="url-input svelte-xmeofi"><input type="url" placeholder="Enter JSON file URL..." class="svelte-xmeofi"/> <button class="svelte-xmeofi">Load</button></div> <p class="help svelte-xmeofi">Load GARD results from a remote JSON file.</p></div> <div class="option svelte-xmeofi"><h3 class="svelte-xmeofi">Upload File</h3> <input type="file" accept=".json,.gz" class="svelte-xmeofi"/> <p class="help svelte-xmeofi">Upload a local GARD JSON file from your computer.</p></div></div> <!> <!></div> <!> <div class="usage-info svelte-xmeofi"><h2 class="svelte-xmeofi">About GARD</h2> <h3 class="svelte-xmeofi">What is GARD?</h3> <p><strong>GARD (Genetic Algorithm for Recombination Detection)</strong> is a method for 
      detecting recombination breakpoints in nucleotide sequence alignments. It uses genetic 
      algorithms to search for the optimal placement of breakpoints that best explain 
      phylogenetic incongruence in the data.</p> <h3 class="svelte-xmeofi">Key Features</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Genetic algorithm:</strong> Uses GA optimization for breakpoint detection</li> <li class="svelte-xmeofi"><strong>Model selection:</strong> Compares models with and without recombination</li> <li class="svelte-xmeofi"><strong>Breakpoint mapping:</strong> Identifies precise locations of recombination events</li> <li class="svelte-xmeofi"><strong>Statistical testing:</strong> Provides significance tests for recombination</li> <li class="svelte-xmeofi"><strong>Multiple breakpoints:</strong> Can detect multiple recombination events</li></ul> <h3 class="svelte-xmeofi">Interpretation</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Breakpoint position:</strong> Location where recombination occurred</li> <li class="svelte-xmeofi"><strong>Support values:</strong> Statistical support for each breakpoint</li> <li class="svelte-xmeofi"><strong>Confidence intervals:</strong> Uncertainty in breakpoint positions</li> <li class="svelte-xmeofi"><strong>p-value &lt; 0.05:</strong> Significant evidence for recombination</li> <li class="svelte-xmeofi"><strong>Model improvement:</strong> Better fit with recombination model</li></ul> <h3 class="svelte-xmeofi">Using This Component</h3> <pre class="svelte-xmeofi"><code class="svelte-xmeofi">import &#123; GardVisualization &#125; from 'hyphy-scope';

&lt;GardVisualization data=&#123;gardResults&#125; /&gt;</code></pre> <h3 class="svelte-xmeofi">Data Format</h3> <p>The component expects GARD analysis results in JSON format with the following structure:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><code class="svelte-xmeofi">breakpoints</code> - Array of detected breakpoint locations</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">p-value</code> - Overall significance of recombination detection</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">recombinants</code> - Information about recombinant sequences</li> <li class="svelte-xmeofi"><code class="svelte-xmeofi">input</code> - Input parameters (sequences, sites)</li></ul> <h3 class="svelte-xmeofi">Applications</h3> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Viral evolution:</strong> Detect recombination in viral genomes</li> <li class="svelte-xmeofi"><strong>Population genetics:</strong> Identify recombination hotspots</li> <li class="svelte-xmeofi"><strong>Phylogenetic analysis:</strong> Account for recombination in tree construction</li> <li class="svelte-xmeofi"><strong>HIV research:</strong> Study recombination in HIV sequences</li> <li class="svelte-xmeofi"><strong>Bacterial genomics:</strong> Detect horizontal gene transfer events</li></ul> <h3 class="svelte-xmeofi">Method Comparison</h3> <p>GARD differs from other recombination detection methods:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Model-based:</strong> Uses maximum likelihood framework</li> <li class="svelte-xmeofi"><strong>GA optimization:</strong> Efficient search through breakpoint space</li> <li class="svelte-xmeofi"><strong>Multiple breakpoints:</strong> Can handle complex recombination patterns</li> <li class="svelte-xmeofi"><strong>Statistical rigor:</strong> Provides formal hypothesis testing</li> <li class="svelte-xmeofi"><strong>HyPhy integration:</strong> Seamlessly works with other HyPhy analyses</li></ul> <h3 class="svelte-xmeofi">Workflow Integration</h3> <p>GARD is often used as a preliminary step:</p> <ul class="svelte-xmeofi"><li class="svelte-xmeofi"><strong>Before selection analysis:</strong> Detect recombination first</li> <li class="svelte-xmeofi"><strong>Data partitioning:</strong> Analyze non-recombinant segments separately</li> <li class="svelte-xmeofi"><strong>Model selection:</strong> Choose appropriate evolutionary models</li> <li class="svelte-xmeofi"><strong>Quality control:</strong> Identify problematic sequences or regions</li></ul></div></div>`);function Qe(W,T){te(T,!1);let n=h(null),c=h(!1),v=h(""),p=h(""),k=h("gard");const j=[{value:"fel",label:"FEL"},{value:"meme",label:"MEME"},{value:"absrel",label:"aBSREL"},{value:"busted",label:"BUSTED"},{value:"relax",label:"RELAX"},{value:"slac",label:"SLAC"},{value:"bgm",label:"BGM"},{value:"fade",label:"FADE"},{value:"gard",label:"GARD"}];ee(async()=>{await $()});async function $(){try{s(c,!0),s(v,""),s(n,await pe(e(k)))}catch(t){s(v,`Failed to load ${e(k).toUpperCase()} test data: ${t.message}`),s(n,null)}finally{s(c,!1)}}async function w(){if(!e(p).trim()){s(v,"Please enter a valid URL");return}try{s(c,!0),s(v,""),s(n,await ge(e(p)))}catch(t){s(v,`Failed to load data from URL: ${t.message}`),s(n,null)}finally{s(c,!1)}}async function K(t){var d;const l=(d=t.target.files)==null?void 0:d[0];if(l)try{s(c,!0),s(v,""),s(n,await be(l))}catch(R){s(v,`Failed to load file: ${R.message}`),s(n,null)}finally{s(c,!1)}}function B(){s(v,"")}ae();var C=qe();de(t=>{var l=Be();re.title="GARD Analysis - HyPhy Scope",u(t,l)});var P=r(o(C),2),U=r(o(P),2),i=o(U),m=r(o(i),2),f=o(m);I(()=>{e(k),ce(()=>{})}),fe(f,5,()=>j,ue,(t,l)=>{var d=Ce(),R=o(d,!0);a(d);var D={};I(()=>{G(R,e(l).label),D!==(D=e(l).value)&&(d.value=(d.__value=e(l).value)??"")}),u(t,d)}),a(f);var g=r(f,2),A=o(g,!0);a(g),a(m),x(2),a(i);var z=r(i,2),_=r(o(z),2),y=o(_);_e(y);var S=r(y,2);a(_),x(2),a(z);var M=r(z,2),H=r(o(M),2);x(2),a(M),a(U);var L=r(U,2);{var O=t=>{var l=Pe();u(t,l)};F(L,t=>{e(c)&&t(O)})}var X=r(L,2);{var q=t=>{var l=Ue(),d=o(l),R=o(d,!0);a(d);var D=r(d,2);a(l),I(()=>G(R,e(v))),J("click",D,B),u(t,l)};F(X,t=>{e(v)&&t(q)})}a(P);var V=r(P,2);{var Q=t=>{var l=ze(),d=o(l);we(d,{get data(){return e(n)}}),a(l),u(t,l)},N=t=>{var l=ve(),d=se(l);{var R=D=>{var oe=Me();u(D,oe)};F(d,D=>{e(c)||D(R)},!0)}u(t,l)};F(V,t=>{e(n)?t(Q):t(N,!1)})}x(2),a(C),I(t=>{g.disabled=e(c),G(A,e(c)?"Loading...":"Load Test Data"),y.disabled=e(c),S.disabled=t,H.disabled=e(c)},[()=>e(c)||!e(p).trim()]),he(f,()=>e(k),t=>s(k,t)),J("click",g,$),xe(y,()=>e(p),t=>s(p,t)),J("click",S,w),J("change",H,K),u(W,C),ie()}export{Qe as component};
