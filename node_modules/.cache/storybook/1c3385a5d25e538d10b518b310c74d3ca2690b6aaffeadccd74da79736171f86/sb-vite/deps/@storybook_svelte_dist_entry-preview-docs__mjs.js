import {
  cn,
  gt,
  yn
} from "./chunk-5BF67GOA.js";
import "./chunk-K3RP4MY7.js";
import "./chunk-GEPAX6R6.js";
import "./chunk-YCQH4A7G.js";
import {
  require_client_logger
} from "./chunk-P2GHSLLJ.js";
import {
  require_preview_api
} from "./chunk-4OLFFFK7.js";
import {
  __toESM
} from "./chunk-BFCEFRYA.js";

// node_modules/@storybook/svelte/dist/entry-preview-docs.mjs
var import_client_logger = __toESM(require_client_logger(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
function hasKeyword(keyword, keywords) {
  return keywords ? keywords.find((k) => k.name === keyword) != null : false;
}
var extractArgTypes = (component) => {
  try {
    let docgen = component.__docgen;
    if (docgen) return createArgTypes(docgen);
  } catch (err) {
    import_client_logger.logger.log(`Error extracting argTypes: ${err}`);
  }
  return {};
};
var createArgTypes = (docgen) => {
  let results = {};
  return docgen.data && docgen.data.forEach((item) => {
    var _a, _b, _c;
    results[item.name] = { ...parseTypeToControl(item.type), name: item.name, description: item.description || void 0, type: { required: hasKeyword("required", item.keywords || []), name: ((_a = item.type) == null ? void 0 : _a.text) === "{}" ? "object" : (_b = item.type) == null ? void 0 : _b.text }, table: { type: { summary: (_c = item.type) == null ? void 0 : _c.text }, defaultValue: { summary: item.defaultValue }, category: "properties" } };
  }), docgen.events && docgen.events.forEach((item) => {
    results[`event_${item.name}`] = { name: item.name, action: item.name, control: false, ...item.description ? { description: item.description } : {}, table: { category: "events" } };
  }), docgen.slots && docgen.slots.forEach((item) => {
    var _a;
    results[`slot_${item.name}`] = { name: item.name, control: false, description: [item.description, (_a = item.params) == null ? void 0 : _a.map((p) => `\`${p.name}\``).join(" ")].filter((p) => p).join(`

`), table: { category: "slots" } };
  }), results;
};
var parseTypeToControl = (type) => {
  if (!type) return null;
  if (type.kind === "type") switch (type.type) {
    case "string":
      return { control: { type: "text" } };
    case "any":
      return { control: { type: "object" } };
    default:
      return { control: { type: type.type } };
  }
  else if (type.kind === "union") {
    if (Array.isArray(type.type) && !type.type.some((t) => t.kind !== "const" || !["string", "number", "null", "undefined"].includes(t.type))) {
      let options = type.type.map((t) => t.value);
      return { control: { type: "radio", labels: options.map(String) }, options };
    }
  } else if (type.kind === "function") return { control: null };
  return null;
};
function extractComponentDescription(component) {
  if (!component) return "";
  let { __docgen = {} } = component;
  return __docgen.description;
}
var skipSourceRender = (context) => {
  var _a;
  let sourceParams = (_a = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a.source, isArgsStory = context == null ? void 0 : context.parameters.__isArgsStory;
  return (sourceParams == null ? void 0 : sourceParams.type) === gt.DYNAMIC ? false : !isArgsStory || (sourceParams == null ? void 0 : sourceParams.code) || (sourceParams == null ? void 0 : sourceParams.type) === gt.CODE;
};
function toSvelteProperty(key, value, argTypes) {
  if (value == null) return null;
  let argType = argTypes[key];
  return argType && argType.defaultValue === value || argType && argType.action ? null : value === true ? key : typeof value == "string" ? `${key}=${JSON.stringify(value)}` : typeof value == "function" ? `${key}={<handler>}` : `${key}={${JSON.stringify(value)}}`;
}
function getComponentName(component) {
  if (component == null) return null;
  let { __docgen = {} } = component, { name } = __docgen;
  return name ? (name.endsWith(".svelte") && (name = name.substring(0, name.length - 7)), name) : component.name;
}
function generateSvelteSource(component, args, argTypes, slotProperty) {
  let name = getComponentName(component);
  if (!name) return null;
  let propsArray = Object.entries(args).filter(([k]) => k !== slotProperty).map(([k, v]) => toSvelteProperty(k, v, argTypes)).filter((p) => p), props = propsArray.join(" "), multiline = props.length > 50, slotValue = slotProperty ? args[slotProperty] : null, srcStart = multiline ? `<${name}
  ${propsArray.join(`
  `)}` : `<${name} ${props}`;
  return slotValue ? `${srcStart}>
    ${slotValue}
</${name}>` : `${srcStart}/>`;
}
function getWrapperProperties(component) {
  var _a, _b, _c;
  let { __docgen } = component || {};
  return __docgen ? ((_a = __docgen.keywords) == null ? void 0 : _a.find((kw) => kw.name === "wrapper")) ? { wrapper: true, slotProperty: (_c = (_b = __docgen.data) == null ? void 0 : _b.find((prop) => prop.keywords.find((kw) => kw.name === "slot"))) == null ? void 0 : _c.name } : { wrapper: false } : { wrapper: false };
}
var sourceDecorator = (storyFn, context) => {
  let channel = import_preview_api.addons.getChannel(), skip = skipSourceRender(context), story = storyFn(), source;
  if ((0, import_preview_api.useEffect)(() => {
    if (!skip && source) {
      let { id, unmappedArgs } = context;
      channel.emit(yn, { id, args: unmappedArgs, source });
    }
  }), skip) return story;
  let { parameters: parameters2 = {}, args = {}, component: ctxComponent } = context || {}, { Component: component } = context.originalStoryFn(args, context), { wrapper, slotProperty } = getWrapperProperties(component);
  wrapper && (parameters2.component && (0, import_client_logger.deprecate)("parameters.component is deprecated. Using context.component instead."), component = ctxComponent);
  let generated = generateSvelteSource(component, args, context == null ? void 0 : context.argTypes, slotProperty);
  return generated && (source = generated), story;
};
var parameters = { docs: { story: { inline: true }, extractArgTypes, extractComponentDescription } };
var decorators = [sourceDecorator];
var argTypesEnhancers = [cn];
export {
  argTypesEnhancers,
  decorators,
  parameters
};
//# sourceMappingURL=@storybook_svelte_dist_entry-preview-docs__mjs.js.map
