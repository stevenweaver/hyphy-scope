import {
  onMount
} from "./chunk-2UL5CA3R.js";
import "./chunk-5T3KXLYS.js";
import {
  getContext,
  setContext
} from "./chunk-ECGD55NV.js";
import "./chunk-YO4W5TPZ.js";
import "./chunk-P6TGDP3C.js";
import {
  require_preview_errors,
  v4_default
} from "./chunk-6FAR6UZB.js";
import {
  require_global
} from "./chunk-ACZXPUQJ.js";
import {
  require_preview_api
} from "./chunk-4OLFFFK7.js";
import {
  __toESM
} from "./chunk-BFCEFRYA.js";

// node_modules/@storybook/sveltekit/dist/chunk-CEH6MNVV.mjs
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};

// node_modules/@storybook/addon-actions/dist/chunk-4XZ63LWV.mjs
var import_preview_api = __toESM(require_preview_api(), 1);
var import_preview_errors = __toESM(require_preview_errors(), 1);
var import_global = __toESM(require_global(), 1);
var __defProp2 = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
};
var ADDON_ID = "storybook/actions";
var PANEL_ID = `${ADDON_ID}/panel`;
var EVENT_ID = `${ADDON_ID}/action-event`;
var CLEAR_ID = `${ADDON_ID}/action-clear`;
var config = { depth: 10, clearOnStoryChange: true, limit: 50 };
var findProto = (obj, callback) => {
  let proto = Object.getPrototypeOf(obj);
  return !proto || callback(proto) ? proto : findProto(proto, callback);
};
var isReactSyntheticEvent = (e) => !!(typeof e == "object" && e && findProto(e, (proto) => /^Synthetic(?:Base)?Event$/.test(proto.constructor.name)) && typeof e.persist == "function");
var serializeArg = (a) => {
  if (isReactSyntheticEvent(a)) {
    let e = Object.create(a.constructor.prototype, Object.getOwnPropertyDescriptors(a));
    e.persist();
    let viewDescriptor = Object.getOwnPropertyDescriptor(e, "view"), view = viewDescriptor == null ? void 0 : viewDescriptor.value;
    return typeof view == "object" && (view == null ? void 0 : view.constructor.name) === "Window" && Object.defineProperty(e, "view", { ...viewDescriptor, value: Object.create(view.constructor.prototype) }), e;
  }
  return a;
};
var generateId = () => typeof crypto == "object" && typeof crypto.getRandomValues == "function" ? v4_default() : Date.now().toString(36) + Math.random().toString(36).substring(2);
function action(name, options = {}) {
  let actionOptions = { ...config, ...options }, handler = function(...args) {
    var _a, _b;
    if (options.implicit) {
      let storyRenderer = (_a = "__STORYBOOK_PREVIEW__" in import_global.global ? import_global.global.__STORYBOOK_PREVIEW__ : void 0) == null ? void 0 : _a.storyRenders.find((render) => render.phase === "playing" || render.phase === "rendering");
      if (storyRenderer) {
        let deprecated = !((_b = globalThis == null ? void 0 : globalThis.FEATURES) == null ? void 0 : _b.disallowImplicitActionsInRenderV8), error = new import_preview_errors.ImplicitActionsDuringRendering({ phase: storyRenderer.phase, name, deprecated });
        if (deprecated) console.warn(error);
        else throw error;
      }
    }
    let channel = import_preview_api.addons.getChannel(), id = generateId(), minDepth = 5, serializedArgs = args.map(serializeArg), normalizedArgs = args.length > 1 ? serializedArgs : serializedArgs[0], actionDisplayToEmit = { id, count: 0, data: { name, args: normalizedArgs }, options: { ...actionOptions, maxDepth: minDepth + (actionOptions.depth || 3), allowFunction: actionOptions.allowFunction || false } };
    channel.emit(EVENT_ID, actionDisplayToEmit);
  };
  return handler.isAction = true, handler.implicit = options.implicit, handler;
}

// node_modules/@storybook/addon-actions/dist/index.mjs
var import_preview_api2 = __toESM(require_preview_api(), 1);
var import_global2 = __toESM(require_global(), 1);
var preview_exports = {};
__export2(preview_exports, { argsEnhancers: () => argsEnhancers, loaders: () => loaders });
var isInInitialArgs = (name, initialArgs) => typeof initialArgs[name] > "u" && !(name in initialArgs);
var inferActionsFromArgTypesRegex = (context) => {
  let { initialArgs, argTypes, id, parameters: { actions: actions2 } } = context;
  if (!actions2 || actions2.disable || !actions2.argTypesRegex || !argTypes) return {};
  let argTypesRegex = new RegExp(actions2.argTypesRegex);
  return Object.entries(argTypes).filter(([name]) => !!argTypesRegex.test(name)).reduce((acc, [name, argType]) => (isInInitialArgs(name, initialArgs) && (acc[name] = action(name, { implicit: true, id })), acc), {});
};
var addActionsFromArgTypes = (context) => {
  let { initialArgs, argTypes, parameters: { actions: actions2 } } = context;
  return (actions2 == null ? void 0 : actions2.disable) || !argTypes ? {} : Object.entries(argTypes).filter(([name, argType]) => !!argType.action).reduce((acc, [name, argType]) => (isInInitialArgs(name, initialArgs) && (acc[name] = action(typeof argType.action == "string" ? argType.action : name)), acc), {});
};
var argsEnhancers = [addActionsFromArgTypes, inferActionsFromArgTypesRegex];
var subscribed = false;
var logActionsWhenMockCalled = (context) => {
  let { parameters: { actions: actions2 } } = context;
  if (!(actions2 == null ? void 0 : actions2.disable) && !subscribed && "__STORYBOOK_TEST_ON_MOCK_CALL__" in import_global2.global && typeof import_global2.global.__STORYBOOK_TEST_ON_MOCK_CALL__ == "function") {
    let onMockCall = import_global2.global.__STORYBOOK_TEST_ON_MOCK_CALL__;
    onMockCall((mock, args) => {
      let name = mock.getMockName();
      name !== "spy" && (!/^next\/.*::/.test(name) || ["next/router::useRouter()", "next/navigation::useRouter()", "next/navigation::redirect", "next/cache::", "next/headers::cookies().set", "next/headers::cookies().delete", "next/headers::headers().set", "next/headers::headers().delete"].some((prefix) => name.startsWith(prefix))) && action(name)(args);
    }), subscribed = true;
  }
};
var loaders = [logActionsWhenMockCalled];

// node_modules/@storybook/sveltekit/dist/chunk-REI2Y3HY.mjs
var preview_exports2 = {};
__export(preview_exports2, { decorators: () => decorators });
function setAfterNavigateArgument(afterNavigateArgs) {
  setContext("after-navigate-args", afterNavigateArgs);
}
function createMockedStore(contextName) {
  return [{ subscribe(runner) {
    let page2 = getContext(contextName);
    return runner(page2), () => {
    };
  } }, (value) => {
    setContext(contextName, value);
  }];
}
var [page, setPage] = createMockedStore("page-ctx");
var [navigating, setNavigating] = createMockedStore("navigating-ctx");
var [updated, setUpdated] = createMockedStore("updated-ctx");
updated.check = () => {
};
var normalizeHrefConfig = (hrefConfig) => typeof hrefConfig == "function" ? { callback: hrefConfig, asRegex: false } : hrefConfig;
var svelteKitMocksDecorator = (Story, ctx) => {
  var _a, _b, _c, _d, _e;
  let svelteKitParameters = ((_a = ctx.parameters) == null ? void 0 : _a.sveltekit_experimental) ?? {};
  return setPage((_b = svelteKitParameters == null ? void 0 : svelteKitParameters.stores) == null ? void 0 : _b.page), setNavigating((_c = svelteKitParameters == null ? void 0 : svelteKitParameters.stores) == null ? void 0 : _c.navigating), setUpdated((_d = svelteKitParameters == null ? void 0 : svelteKitParameters.stores) == null ? void 0 : _d.updated), setAfterNavigateArgument((_e = svelteKitParameters == null ? void 0 : svelteKitParameters.navigation) == null ? void 0 : _e.afterNavigate), onMount(() => {
    let globalClickListener = (e) => {
      let element = e.composedPath().findLast((el) => el instanceof HTMLElement && el.tagName === "A");
      if (element && element instanceof HTMLAnchorElement) {
        let to = element.getAttribute("href");
        if (!to) return;
        e.preventDefault();
        let defaultActionCallback = () => action("navigate")(to, e);
        if (!svelteKitParameters.hrefs) {
          defaultActionCallback();
          return;
        }
        let callDefaultCallback = true;
        Object.entries(svelteKitParameters.hrefs).forEach(([href, hrefConfig]) => {
          let { callback, asRegex } = normalizeHrefConfig(hrefConfig);
          (asRegex ? new RegExp(href).test(to) : to === href) && (callDefaultCallback = false, callback == null ? void 0 : callback(to, e));
        }), callDefaultCallback && defaultActionCallback();
      }
    };
    function createListeners(baseModule, functions, defaultToAction) {
      let toRemove = [];
      return functions.forEach((func) => {
        var _a2;
        let hasFunction = ((_a2 = svelteKitParameters[baseModule]) == null ? void 0 : _a2[func]) && svelteKitParameters[baseModule][func] instanceof Function;
        if (hasFunction || defaultToAction) {
          let listener = ({ detail = [] }) => {
            let args = Array.isArray(detail) ? detail : [];
            (hasFunction ? svelteKitParameters[baseModule][func] : action(func))(...args);
          }, eventType = `storybook:${func}`;
          toRemove.push({ eventType, listener }), window.addEventListener(eventType, listener);
        }
      }), () => {
        toRemove.forEach(({ eventType, listener }) => {
          window.removeEventListener(eventType, listener);
        });
      };
    }
    let removeNavigationListeners = createListeners("navigation", ["goto", "invalidate", "invalidateAll", "pushState", "replaceState"], true), removeFormsListeners = createListeners("forms", ["enhance"]);
    return window.addEventListener("click", globalClickListener), () => {
      window.removeEventListener("click", globalClickListener), removeNavigationListeners(), removeFormsListeners();
    };
  }), Story();
};
var decorators = [svelteKitMocksDecorator];
export {
  decorators
};
//# sourceMappingURL=@storybook_sveltekit_dist_preview__mjs.js.map
