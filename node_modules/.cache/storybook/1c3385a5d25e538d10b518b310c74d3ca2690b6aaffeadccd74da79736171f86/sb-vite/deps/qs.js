import {
  __commonJS
} from "./chunk-BFCEFRYA.js";

// ../../node_modules/qs/lib/querystring.js
var require_querystring = __commonJS({
  "../../node_modules/qs/lib/querystring.js"(exports) {
    var toString = Object.prototype.toString;
    var isint = /^[0-9]+$/;
    function promote(parent, key) {
      if (parent[key].length == 0) return parent[key] = {};
      var t = {};
      for (var i in parent[key]) t[i] = parent[key][i];
      parent[key] = t;
      return t;
    }
    function parse(parts, parent, key, val) {
      var part = parts.shift();
      if (!part) {
        if (Array.isArray(parent[key])) {
          parent[key].push(val);
        } else if ("object" == typeof parent[key]) {
          parent[key] = val;
        } else if ("undefined" == typeof parent[key]) {
          parent[key] = val;
        } else {
          parent[key] = [parent[key], val];
        }
      } else {
        var obj = parent[key] = parent[key] || [];
        if ("]" == part) {
          if (Array.isArray(obj)) {
            if ("" != val) obj.push(val);
          } else if ("object" == typeof obj) {
            obj[Object.keys(obj).length] = val;
          } else {
            obj = parent[key] = [parent[key], val];
          }
        } else if (~part.indexOf("]")) {
          part = part.substr(0, part.length - 1);
          if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);
          parse(parts, obj, part, val);
        } else {
          if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);
          parse(parts, obj, part, val);
        }
      }
    }
    function merge(parent, key, val) {
      if (~key.indexOf("]")) {
        var parts = key.split("["), len = parts.length, last = len - 1;
        parse(parts, parent, "base", val);
      } else {
        if (!isint.test(key) && Array.isArray(parent.base)) {
          var t = {};
          for (var k in parent.base) t[k] = parent.base[k];
          parent.base = t;
        }
        set(parent.base, key, val);
      }
      return parent;
    }
    function parseObject(obj) {
      var ret = { base: {} };
      Object.keys(obj).forEach(function(name) {
        merge(ret, name, obj[name]);
      });
      return ret.base;
    }
    function parseString(str) {
      return String(str).split("&").reduce(function(ret, pair) {
        var eql = pair.indexOf("="), brace = lastBraceInKey(pair), key = pair.substr(0, brace || eql), val = pair.substr(brace || eql, pair.length), val = val.substr(val.indexOf("=") + 1, val.length);
        if ("" == key) key = pair, val = "";
        return merge(ret, decode(key), decode(val));
      }, { base: {} }).base;
    }
    exports.parse = function(str) {
      if (null == str || "" == str) return {};
      return "object" == typeof str ? parseObject(str) : parseString(str);
    };
    var stringify = exports.stringify = function(obj, prefix) {
      if (Array.isArray(obj)) {
        return stringifyArray(obj, prefix);
      } else if ("[object Object]" == toString.call(obj)) {
        return stringifyObject(obj, prefix);
      } else if ("string" == typeof obj) {
        return stringifyString(obj, prefix);
      } else {
        return prefix + "=" + obj;
      }
    };
    function stringifyString(str, prefix) {
      if (!prefix) throw new TypeError("stringify expects an object");
      return prefix + "=" + encodeURIComponent(str);
    }
    function stringifyArray(arr, prefix) {
      var ret = [];
      if (!prefix) throw new TypeError("stringify expects an object");
      for (var i = 0; i < arr.length; i++) {
        ret.push(stringify(arr[i], prefix + "[" + i + "]"));
      }
      return ret.join("&");
    }
    function stringifyObject(obj, prefix) {
      var ret = [], keys = Object.keys(obj), key;
      for (var i = 0, len = keys.length; i < len; ++i) {
        key = keys[i];
        ret.push(stringify(obj[key], prefix ? prefix + "[" + encodeURIComponent(key) + "]" : encodeURIComponent(key)));
      }
      return ret.join("&");
    }
    function set(obj, key, val) {
      var v = obj[key];
      if (void 0 === v) {
        obj[key] = val;
      } else if (Array.isArray(v)) {
        v.push(val);
      } else {
        obj[key] = [v, val];
      }
    }
    function lastBraceInKey(str) {
      var len = str.length, brace, c;
      for (var i = 0; i < len; ++i) {
        c = str[i];
        if ("]" == c) brace = false;
        if ("[" == c) brace = true;
        if ("=" == c && !brace) return i;
      }
    }
    function decode(str) {
      try {
        return decodeURIComponent(str.replace(/\+/g, " "));
      } catch (err) {
        return str;
      }
    }
  }
});

// ../../node_modules/qs/index.js
var require_qs = __commonJS({
  "../../node_modules/qs/index.js"(exports, module) {
    module.exports = require_querystring();
  }
});
export default require_qs();
//# sourceMappingURL=qs.js.map
